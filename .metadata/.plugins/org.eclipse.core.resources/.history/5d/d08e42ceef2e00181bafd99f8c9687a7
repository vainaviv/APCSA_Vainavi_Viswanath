//© A+ Computer Science  -  www.apluscompsci.com
//Name -
//Date -
//Class -
//Lab  -

import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import static java.lang.System.*;

public class Maze
{
   private int[][] maze;
   private boolean bound_exit;

	public Maze()
	{
		maze = new int[0][0];
	}

	public Maze(int size, int[] values)
	{
		bound_exit = false;
		maze = new int[size][size];
		int index = 0;
		for (int i=0; i< maze.length; i++){
			for (int j=0; j< maze[0].length; j++){
				maze[i][j] = values[index];
				index ++;
			}
		}
	}

	public void hasExitPath(int r, int c)
	{
		if (c == maze[0].length-1){
			bound_exit = true;
		}
		else{
			if (maze[r][c] == 1){
				maze[r][c] = 0;
			}
				if (r > 0 && r < maze.length-1 && c > 0){  // checks if location is in the middle
					hasExitPath(r,c+1);
					hasExitPath(r,c-1);
					hasExitPath(r-1,c);
					hasExitPath(r+1,c);
					maze[r][c] = 1;
				}
				else if (r==0 && c>0 && c<maze[0].length-1){ // checks in top row, but middle
					hasExitPath(r,c+1);
					hasExitPath(r,c-1);
					hasExitPath(r+1,c);
					maze[r][c] = 1;
				}
				else if (r== maze.length-1 && c>0 && c<maze[0].length-1){ // checks in bottom row, but middle
					hasExitPath(r,c+1);
					hasExitPath(r,c-1);
					hasExitPath(r-1,c);
					maze[r][c] = 1;
				}
				else if (r>0 && r<(maze.length-1) && c==0){ //checks if in middle of left most column
					hasExitPath(r+1,c);
					hasExitPath(r-1,c);
					hasExitPath(r,c+1);
					maze[r][c] = 1;
				}
				else if (r==maze.length-1 && c==0){  // checks bottom left
					hasExitPath(r-1,c);
					hasExitPath(r,c+1);
					maze[r][c] = 1;
				}
				else if (r==maze.length-1 && c==maze[0].length-1){  // checks bottom right
					hasExitPath(r-1,c);
					hasExitPath(r, c-1);
					maze[r][c] = 1;
				}
				else if (r==0 && c==0){  // top left
					hasExitPath(r+1,c);
					hasExitPath(r,c+1);
					maze[r][c] = 1;
				}
				else if (r==0 && c==maze[0].length-1){ // top right
					hasExitPath(r+1,c);
					hasExitPath(r,c-1);
					maze[r][c] = 1;
				}
			}
			
		bound_exit = false;	
		}


	public String toString()
	{
		String output = "";
		for (int r=0; r<maze.length; r++){
			for (int c=0; c<maze[0].length; c++){
				output += maze[r][c];
			}
			output += "\n";
		}	
			
		if (bound_exit == true){
			output += "exit found";
		}
		else{
			output += "exit not found";
		}
	return output;
}
}