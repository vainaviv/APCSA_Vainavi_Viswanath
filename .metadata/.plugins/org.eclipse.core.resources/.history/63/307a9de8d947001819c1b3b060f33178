import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  /** Method to set the blue to 0 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setBlue(0);
      }
    }
  }
  public void keepOnlyBlue(){
	  Pixel[][] pixels = this.getPixels2D();
	  for (Pixel[] row : pixels){
		  for (Pixel pix: row){
			  pix.setGreen(0);
			  pix.setRed(0);
		  }
	  }
  }
  public void keepOnlyRed(){
	  Pixel[][] pixels = this.getPixels2D();
	  for (Pixel[] row : pixels){
		  for (Pixel pix: row){
			  pix.setGreen(0);
			  pix.setBlue(0);
		  }
	  }
  }
  public void keepOnlyGreen(){
	  Pixel[][] pixels = this.getPixels2D();
	  for (Pixel[] row : pixels){
		  for (Pixel pix: row){
			  pix.setRed(0);
			  pix.setBlue(0);
		  }
	  }
  }
  public void negate(){
	  Pixel[][] pixels = this.getPixels2D();
	  for (Pixel[] row:pixels){
		  for (Pixel pix: row){
			  pix.setGreen(255-pix.getGreen());
			  pix.setBlue(255-pix.getBlue());
			  pix.setRed(255-pix.getRed());
		  }
	  }
  }
  public void grayscale(){
	  Pixel[][] pixels = this.getPixels2D();
	  for (Pixel[] row: pixels){
		  for (Pixel pix: row){
			  int val = (pix.getGreen()+pix.getBlue()+pix.getRed())/3;
			  pix.setGreen(val);
			  pix.setBlue(val);
			  pix.setRed(val);
		  }
	  }
  }
  
  public void fixUnderwater(){
	  Pixel[][] pixels = this .getPixels2D();
	  for (Pixel[] row: pixels){
		  for (Pixel pix: row){
			  pix.setRed(pix.getRed()*3);
		  }
	  }
  }
  
  /** Method that mirrors the picture around a 
    * vertical mirror in the center of the picture
    * from left to right */
  public void mirrorVertical()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int width = pixels[0].length;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; col < width / 2; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][width - 1 - col];
        rightPixel.setColor(leftPixel.getColor());
      }
    } 
  }
  
  public void mirrorVerticalRightToLeft(){
	  Pixel[][] pixels = this.getPixels2D();
	  Pixel leftPixel = null;
	  Pixel rightPixel = null;
	  int width = pixels[0].length;
	  for (int row = 0; row < pixels.length; row++){
		  for (int col = 0; col < width/2; col++){
			  leftPixel = pixels[row][col];
			  rightPixel = pixels[row][width-1-col];
			  leftPixel.setColor(rightPixel.getColor());
		  }
	  }
  }
  
  public void mirrorHorizontal(){
	  Pixel[][] pixels = this.getPixels2D();
	  Pixel topPixel = null;
	  Pixel botPixel = null;
	  int height = pixels.length;
	  for (int col = 0; col<pixels[0].length; col++){
		  for (int row = 0; row<height/2; row++){
			  topPixel = pixels[row][col];
			  botPixel = pixels[height-1-row][col];
			  botPixel.setColor(topPixel.getColor());
		  }
	  }
  }
  
  public void mirrorHorizontalBotToTop(){
	  Pixel[][] pixels = this.getPixels2D();
	  Pixel topPixel = null;
	  Pixel botPixel = null;
	  int height = pixels.length;
	  for (int col = 0; col<pixels[0].length; col++){
		  for (int row = 0; row<height/2; row++){
			  topPixel = pixels[row][col];
			  botPixel = pixels[height-1-row][col];
			  topPixel.setColor(botPixel.getColor());
		  }
	  }
  }
  
  public void mirrorDiagonal(){
	  Pixel[][] pixels = this.getPixels2D();
	  Pixel pix1 = null;
	  Pixel pix2 = null;
	  int height = pixels.length;
	  int width = pixels[0].length;
	  for (int row = 0; row < height; row ++){
		  for (int col = 0; col <height; col++){
			  pix1 = pixels[row][col];
			  pix2 = pixels[col][row];
			  pix1.setColor(pix2.getColor());
		  }
	  }
  }
  
  /** Mirror just part of a picture of a temple */
  public void mirrorTemple()
  {
    int mirrorPoint = 276;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();
    
    // loop through the rows
    for (int row = 27; row < 97; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 13; col < mirrorPoint; col++)
      {
        
        leftPixel = pixels[row][col];      
        rightPixel = pixels[row]                       
                         [mirrorPoint - col + mirrorPoint];
        rightPixel.setColor(leftPixel.getColor());
        count ++;
      }
    }
    System.out.println(count);
  }
  
  public void mirrorArms(){
	  int mirrorPoint = 190;
	  Pixel topPixel = null;
	  Pixel botPixel = null;
	  Pixel[][] pixels = this.getPixels2D();
	  
	  for (int row = 160; row < 190; row++){
		  for (int col = 100; col < 170; col++){
			  topPixel = pixels[row][col];
			  botPixel = pixels[mirrorPoint-row+mirrorPoint][col];
			  botPixel.setColor(topPixel.getColor());
		  }
	  }
	  
	  for (int row = 170; row <200; row++){
		  for (int col = 240; col < 300; col++){
			  topPixel = pixels[row][col];
			  botPixel = pixels[mirrorPoint-row+mirrorPoint][col];
			  botPixel.setColor(topPixel.getColor());
		  }
	  }
  }
  
  public void mirrorGulls(){
	  int mirrorPoint = 360;
	  Pixel rightPixel = null;
	  Pixel leftPixel = null;
	  Pixel[][] pixels = this.getPixels2D();
	  
	  for (int row = 230; row < 320; row++){
		  for (int col = 230; col < 350; col++){
			  rightPixel = pixels[row][col];
			  leftPixel = pixels[row][mirrorPoint-col+mirrorPoint];
			  leftPixel.setColor(rightPixel.getColor());
		  }
	  }
  }
  
  /** copy from the passed fromPic to the
    * specified startRow and startCol in the
    * current picture
    * @param fromPic the picture to copy from
    * @param startRow the start row to copy to
    * @param startCol the start col to copy to
    */
  public void copy(Picture fromPic, 
                 int startRow, int startCol)
  {
    Pixel fromPixel = null;
    Pixel toPixel = null;
    Pixel[][] toPixels = this.getPixels2D();
    Pixel[][] fromPixels = fromPic.getPixels2D();
    for (int fromRow = 0, toRow = startRow; 
         fromRow < fromPixels.length &&
         toRow < toPixels.length; 
         fromRow++, toRow++)
    {
      for (int fromCol = 0, toCol = startCol; 
           fromCol < fromPixels[0].length &&
           toCol < toPixels[0].length;  
           fromCol++, toCol++)
      {
        fromPixel = fromPixels[fromRow][fromCol];
        toPixel = toPixels[toRow][toCol];
        toPixel.setColor(fromPixel.getColor());
      }
    }   
  }
  
  public void copy2(Picture fromPic, int startFromRow, int startFromCol, 
		  			int endFromRow, int endFromCol, int toStartRow, int toStartCol){
	  Pixel fromPixel = null;
	  Pixel toPixel = null;
	  Pixel[][] toPixels = this.getPixels2D();
	  Pixel[][] fromPixels = fromPic.getPixels2D();
	  for (int fromRow = startFromRow, toRow = toStartRow; 
		         fromRow < endFromRow &&
		         toRow < toPixels.length; 
		         fromRow++, toRow++)
		    {
		      for (int fromCol = startFromCol, toCol = toStartCol; 
		           fromCol < endFromCol &&
		           toCol < toPixels[0].length;  
		           fromCol++, toCol++)
		      {
		        fromPixel = fromPixels[fromRow][fromCol];
		        toPixel = toPixels[toRow][toCol];
		        toPixel.setColor(fromPixel.getColor());
		      }
		    }   
  }

  /** Method to create a collage of several pictures */
  public void createCollage()
  {
    Picture flower1 = new Picture("H:\\pixLab\\images\\flower1.jpg");
    Picture flower2 = new Picture("H:\\pixLab\\images\\flower2.jpg");
    this.copy(flower1,0,0);
    this.copy(flower2,100,0);
    this.copy(flower1,200,0);
    Picture flowerNoBlue = new Picture(flower2);
    flowerNoBlue.zeroBlue();
    this.copy(flowerNoBlue,300,0);
    this.copy(flower1,400,0);
    this.copy(flower2,500,0);
    this.mirrorVertical();
    this.write("H:\\pixLab\\images\\collage.jpg");
  }
  
  public void myCollage(){
	  Picture kit = new Picture("H:\\pixLab\\images\\kitten2.jpg");
	  this.copy2(kit, 80, 120, 200, 350, 0, 0);
	  Picture kitgray = new Picture(kit);
	  kitgray.grayscale();
	  this.copy2(kitgray, 80, 120, 200, 350, 120, 0);
	  Picture kitblue = new Picture(kit);
	  kitblue.keepOnlyBlue();
	  this.copy2(kitblue, 80, 120, 200, 350, 240, 0);
	  this.mirrorVertical();
	  
  }
  
  /** Method to show large changes in color 
    * @param edgeDist the distance for finding edges
    */
  public void edgeDetection(int edgeDist)
  {
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    Pixel botPixel = null;
    Pixel[][] pixels = this.getPixels2D();
    Color rightColor = null;
    Color botColor = null;
    for (int row = 0; row < pixels.length-1; row++)
    {
      for (int col = 0; 
           col < pixels[0].length-1; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][col+1];
        rightColor = rightPixel.getColor();
        botPixel = pixels[row+1][col];
        botColor = botPixel.getColor();
        if (leftPixel.colorDistance(rightColor) > 
            edgeDist){
          if (leftPixel.colorDistance(botColor) > edgeDist){
              leftPixel.setColor(Color.BLACK);
          }
          else {
        	  leftPixel.setColor(Color.WHITE);
          }
        }
        else{
        	 if (leftPixel.colorDistance(botColor) > edgeDist){
                 leftPixel.setColor(Color.BLACK);
             }
             else {
           	  leftPixel.setColor(Color.WHITE);
             }
        }
      }
    }
  }
  
  
  /* Main method for testing - each class in Java can have a main 
   * method 
   */
  public static void main(String[] args) 
  {
    Picture beach = new Picture("H:\\pixLab\\images\\beach.jpg");
    beach.explore();
    beach.zeroBlue();
    beach.explore();
  }

public void blur(int x, int y, int w, int h) {
	// TODO Auto-generated method stub
	  Pixel topPix = null;
	  Pixel botPix = null;
	  Pixel rightPix = null;
	  Pixel leftPix = null;
	  Pixel mod = null;
	  Pixel[][] pixels = this.getPixels2D();
	  for (int i=x; i<x+w; i+=2){
		  for (int j=y; j<y+h; j+=2){
			  mod = pixels[i][j];
			  topPix = pixels[i-1][j];
			  botPix = pixels[i+1][j];
			  rightPix = pixels[i][j+1];
			  leftPix = pixels[i][j-1];
			  int red = (topPix.getRed()+botPix.getRed()+rightPix.getRed()+leftPix.getRed())/4;
			  int blue = (topPix.getBlue()+botPix.getBlue()+rightPix.getBlue()+leftPix.getBlue())/4;
			  int green = (topPix.getGreen()+botPix.getGreen()+rightPix.getGreen()+leftPix.getGreen())/4;
			  //topPix.setBlue(blue);
			  //topPix.setRed(red);
			  //topPix.setGreen(green);
			  //botPix.setColor(topPix.getColor());
//			  botPix.setBlue(blue);
//			  botPix.setRed(red);
//			  botPix.setGreen(green);
			  //rightPix.setColor(topPix.getColor());
//			  rightPix.setBlue(blue);
//			  rightPix.setRed(red);
//			  rightPix.setGreen(green);
			  //leftPix.setColor(topPix.getColor());
//			  leftPix.setBlue(blue);
//			  leftPix.setRed(red);
//			  leftPix.setGreen(green);
			  mod.setRed(red);
			  mod.setBlue(blue);
			  mod.setGreen(green);
		  }
	  }
}
  
} // this } is the end of class Picture, put all new methods before this
